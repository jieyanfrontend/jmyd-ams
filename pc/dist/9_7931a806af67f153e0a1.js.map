{"version":3,"sources":["webpack:///./pages/setting/setting.js","webpack:///./helpers/request.js","webpack:///./helpers/handle-formdata.js","webpack:///./helpers/handle-json.js","webpack:///./components/update-modal.js","webpack:///./pages/setting/setting.css"],"names":["__webpack_require__","_reactRouterDom","Setting","state","taskTypeList","loop","addTypeErr","updating","updateType","columns","title","dataIndex","render","time","_react2","default","createElement","id","record","onClick","_this","updateING","style","marginRight","deleteType","hasErrors","fieldsError","Object","keys","some","field","fetchTaskTypeList","_request2","url","data","success","table","props","form","setFields","value","setState","handleAddTaskType","e","preventDefault","that","validateFields","err","values","task_type_name","time_warn","time_out","_notification3","message","description","fail","type","closeModal","_ref2","task_type_id","res","handleSetLoop","loop_time","handleChange","Component","_this2","this","_props$form","getFieldDecorator","isFieldTouched","getFieldError","getFieldsError","_state","typeNameErr","timeWarnErr","timeOutErr","loopErr","_updateModal2","visible","ensure","close","_card2","className","_setting2","card","bordered","_form2","onSubmit","layout","search_form","_row2","gutter","_col2","span","Item","validateStatus","help","label","form_item","rules","required","_input2","onChange","addonAfter","_button2","disabled","icon","htmlType","_table2","dataSource","rowKey","pagination","name","initialValue","validator","rule","cb","parseFloat","pattern","autoComplete","system_btn_group","Link","to","SettingForm","create","_ref","_ref$method","method","undefined","_ref$postType","postType","_ref$data","_ref$success","_ref$fail","_ref$complete","complete","Error","xml","XMLHttpRequest","open","postData","setRequestHeader","_handleJson2","_handleFormdata2","onreadystatechange","readyState","status","JSON","parse","responseText","code","parseInt","_history2","push","_modal2","warning","content","msg","alert","send","ret","FormData","map","k","Array","isArray","forEach","d","append","stringify","UpdateModal","setValue","getFieldsValue","_extends","_props","footer","_alert2","nextProps","UpdateModalForm","module","exports"],"mappings":"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","file":"9_7931a806af67f153e0a1.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Card, Form, Input,Row,Col, Button, Table, notification, Modal  } from 'antd';\r\nimport style from './setting.css';\r\nimport request from '../../helpers/request';\r\nimport UpdateModal from '../../components/update-modal';\r\nclass Setting extends React.Component{\r\n    state = {\r\n        taskTypeList: [],\r\n        loop: '',\r\n        addTypeErr: false,\r\n        updating: false,\r\n        updateType: {}\r\n    };\r\n    columns = [{\r\n        title: '任务类型',\r\n        dataIndex: 'task_type_name'\r\n    },{\r\n        title: '预警时间',\r\n        dataIndex: 'time_warn',\r\n        render: (time) => <span>提前{time}小时</span>\r\n    }, {\r\n        title: '超时时间',\r\n        dataIndex: 'time_out',\r\n        render: (time) => <span>提前{time}小时</span>\r\n    }, {\r\n        title: '操作',\r\n        dataIndex: 'task_type_id',\r\n        render: (id, record) => <span>\r\n            <a onClick={() => this.updateING(record)} style={{marginRight: '8px'}}>修改</a>\r\n            <a onClick={() => this.deleteType(id)}>删除</a>\r\n        </span>\r\n    }];\r\n    render(){\r\n        const { getFieldDecorator, isFieldTouched, getFieldError, getFieldsError } = this.props.form;\r\n        const  { taskTypeList, loop, addTypeErr, updating , updateType} = this.state;\r\n        const typeNameErr = isFieldTouched('task_type_name') && getFieldError('task_type_name') || addTypeErr;\r\n        const timeWarnErr = isFieldTouched('time_warn') && getFieldError('time_warn');\r\n        const timeOutErr = isFieldTouched('time_out') && getFieldError('time_out');\r\n        const loopErr = isFieldTouched('loop') && getFieldError('loop');\r\n        return (\r\n            <div>\r\n                <UpdateModal visible={updating} type={updateType} ensure={(value) => this.updateType(value)} close={() => this.closeModal()}/>\r\n                <Card title={'任务设置'} className={style.card} bordered={false}>\r\n                    <Form\r\n                        onSubmit={this.handleAddTaskType}\r\n                        layout=\"inline\" className={style.search_form}>\r\n                        <Row gutter={24}>\r\n                            <Col span={7}>\r\n                                <Form.Item\r\n                                    validateStatus={typeNameErr ? 'error' : ''} help={typeNameErr || ''}\r\n                                    label='任务类型' className={style.form_item}>\r\n                                    {getFieldDecorator('task_type_name', {\r\n                                        rules: [{\r\n                                            required: true,\r\n                                            message: '请输入任务类型名称'\r\n                                        }]\r\n                                    })(\r\n                                        <Input onChange={() => this.handleChange()}/>\r\n                                    )}\r\n                                </Form.Item>\r\n                            </Col>\r\n                            <Col span={7}>\r\n                                <Form.Item\r\n                                    validateStatus={timeWarnErr ? 'error' : ''} help={timeWarnErr || ''}\r\n                                    label='预警时间' className={style.form_item}>\r\n                                    {getFieldDecorator('time_warn', {\r\n                                        rules: [{\r\n                                            required: true,\r\n                                            message: '请输入预警时间'\r\n                                        }]\r\n                                    })(\r\n                                        <Input addonAfter={'小时 '}/>\r\n                                    )}\r\n                                </Form.Item>\r\n                            </Col>\r\n                            <Col span={7}>\r\n                                <Form.Item\r\n                                    validateStatus={timeOutErr ? 'error' : ''} help={timeOutErr || ''}\r\n                                    label='超时时间' className={style.form_item}>\r\n                                    {getFieldDecorator('time_out', {\r\n                                        rules: [{\r\n                                            required: true,\r\n                                            message: '请输入超时时间'\r\n                                        }]\r\n                                    })(\r\n                                        <Input addonAfter={'小时'}/>\r\n                                    )}\r\n                                </Form.Item>\r\n                            </Col>\r\n                            <Col>\r\n                                <Form.Item>\r\n                                    <Button\r\n                                        disabled={this.hasErrors(getFieldsError(['task_type_name','time_warn', 'time_out']))}\r\n                                        type=\"primary\" icon={'plus'} htmlType=\"submit\">新增</Button>\r\n                                </Form.Item>\r\n                            </Col>\r\n                        </Row>\r\n                    </Form>\r\n                </Card>\r\n                <Card className={style.card } bordered={false}>\r\n                    <Table columns={this.columns} dataSource={taskTypeList} rowKey='task_type_id' pagination={false}/>\r\n                </Card>\r\n                <Card title={'系统设置'} className={style.card} bordered={false}>\r\n                    <Form\r\n                        name='form2'\r\n                        onSubmit={this.handleSetLoop}\r\n                        layout=\"inline\" className={style.search_form}>\r\n                        <Row gutter={24}>\r\n                            <Col span={8}>\r\n                                <Form.Item\r\n                                    validateStatus={loopErr ? 'error' : ''} help={loopErr || ''}\r\n                                    label='查询周期' className={style.form_item}>\r\n                                    {getFieldDecorator('loop', {\r\n                                        initialValue: loop,\r\n                                        rules: [{\r\n                                            required: true,\r\n                                            message: '请输入查询周期'\r\n                                        },{\r\n                                            validator: (rule, value, cb) => parseFloat(value) === parseFloat(loop) ? cb('请输入一个新的查询周期') : cb(),\r\n                                            pattern: /^[1-9]\\d*$/\r\n                                        }],\r\n                                    })(\r\n                                        <Input\r\n                                            autoComplete={'off'}\r\n                                            addonAfter={'分钟'} />\r\n                                    )}\r\n                                </Form.Item>\r\n                            </Col>\r\n                        </Row>\r\n                        <Form.Item className={style.system_btn_group}>\r\n                            <Link to='/'>\r\n                                <Button type=\"default\" style={{marginRight: '16px'}}>返回</Button>\r\n                            </Link>\r\n                            <Button\r\n                                disabled={!isFieldTouched('loop') || this.hasErrors(getFieldsError(['loop']))}\r\n                                type=\"primary\" htmlType=\"submit\">保存</Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </Card>\r\n            </div>\r\n        )\r\n    }\r\n    componentDidMount(){\r\n        this.props.form.validateFields();\r\n        this.fetchTaskTypeList();\r\n    }\r\n    hasErrors = (fieldsError) => {\r\n        return Object.keys(fieldsError).some(field => fieldsError[field]);\r\n    };\r\n    fetchTaskTypeList = () => {\r\n        request({\r\n            url: '/api/get_config',\r\n            data: {},\r\n            success: (data) => {\r\n                const { table, loop } = data;\r\n                this.props.form.setFields({\r\n                    loop: {\r\n                        value: loop\r\n                    }\r\n                });\r\n                this.setState({\r\n                    taskTypeList: table || [],\r\n                    loop\r\n                })\r\n            }\r\n        })\r\n    };\r\n    handleAddTaskType = (e) => {\r\n        e.preventDefault();\r\n        let that = this;\r\n        this.props.form.validateFields(['task_type_name','time_warn', 'time_out'],(err, values) => {\r\n            if(!err){\r\n                let { task_type_name, time_warn, time_out } = values;\r\n                request({\r\n                    url: '/api/add_type',\r\n                    data: {\r\n                        task_type_name,\r\n                        time_warn,\r\n                        time_out\r\n                    },\r\n                    success: (data) => {\r\n                        notification.success({\r\n                            message: '新增任务类型成功',\r\n                            description: ''\r\n                        });\r\n                        that.props.form.setFields({\r\n                            task_type_name: '',\r\n                            time_warn: '',\r\n                            time_out: ''\r\n                        });\r\n                        that.props.form.validateFields();\r\n                        that.fetchTaskTypeList();\r\n                    },\r\n                    fail: (data) => {\r\n                        this.setState({\r\n                            addTypeErr: '不可重复新增'\r\n                        })\r\n                    }\r\n                })\r\n            }\r\n        });\r\n    };\r\n  updateING = (type) => {\r\n      this.setState({\r\n        updating: true,\r\n        updateType: type\r\n      })\r\n  };\r\n  closeModal = () => {\r\n    this.setState({\r\n      updating: false\r\n    })\r\n  };\r\n  updateType = ({task_type_id, time_warn, time_out}) => {\r\n      request({\r\n        url: '/api/update_type',\r\n        data: {\r\n          task_type_id: task_type_id,\r\n          time_warn: time_warn,\r\n          time_out: time_out\r\n        },\r\n        success: (res) => {\r\n          notification.success({\r\n            message: '修改任务类型成功'\r\n          });\r\n          this.closeModal();\r\n          this.fetchTaskTypeList();\r\n        }\r\n      })\r\n  };\r\n    deleteType = (id) => {\r\n        request({\r\n            url: '/api/delete_type',\r\n            data: {\r\n                task_type_id: id\r\n            },\r\n            success: () => {\r\n                notification.success({\r\n                    message: '删除任务类型成功'\r\n                });\r\n                this.fetchTaskTypeList();\r\n            }\r\n        })\r\n    };\r\n    handleSetLoop = (e) => {\r\n        e.preventDefault();\r\n        let that = this;\r\n        this.props.form.validateFields(['loop'],(err, values) => {\r\n            if(!err){\r\n                request({\r\n                    url: '/api/set_loop',\r\n                    data: {\r\n                        loop_time: values.loop\r\n                    },\r\n                    success: () => {\r\n                        notification.success({\r\n                            message: '设置查询周期成功',\r\n                            description: `设置成功后将每隔${values.loop}分钟自动刷新一次`\r\n                        });\r\n                        that.fetchTaskTypeList();\r\n                    }\r\n                })\r\n            }\r\n        })\r\n    };\r\n    handleChange = () => {\r\n        this.setState({\r\n            addTypeErr: false\r\n        })\r\n    }\r\n}\r\nlet SettingForm = Form.create()(Setting);\r\nexport default SettingForm;","import handleJson from './handle-json';\r\nimport handleFormData from './handle-formdata';\r\nimport history from '../history'\r\nimport {Modal} from \"antd\";\r\n\r\nfunction request({ url, method = 'POST', postType = 'json' ,data = {}, success = () => {}, fail = () => {}, complete = () => {}}) {\r\n    if(!url){\r\n        throw new Error('url参数不可缺省');\r\n    }\r\n    let xml = new XMLHttpRequest();\r\n    xml.open(method, url);\r\n    let postData ;\r\n    switch (postType){\r\n        case 'json':\r\n            xml.setRequestHeader('Content-Type', 'application/json');\r\n            postData = handleJson(data);\r\n            break;\r\n        case 'formdata':\r\n            // xml.setRequestHeader('Content-Type', \"application/vnd.ms-excel\");\r\n            postData = handleFormData(data);\r\n            break;\r\n        default:\r\n            xml.setRequestHeader('Content-Type', 'application/json');\r\n            postData = handleJson(data);\r\n    }\r\n    xml.onreadystatechange = () => {\r\n        if(xml.readyState === 4){\r\n            if(xml.status === 200){\r\n                let data = JSON.parse(xml.responseText);\r\n                let code = data.code;\r\n                try{\r\n                    if(code === undefined) throw new Error('code is not defined');\r\n                }catch(e){\r\n                    data = JSON.parse(data);\r\n                }\r\n                if(parseInt(data.code) === 200){\r\n                    success(data);\r\n                }else{\r\n                    if(data.code === 403){\r\n                        history.push('/login');\r\n                        Modal.warning({\r\n                            title:'警告',\r\n                            content: data.msg\r\n                        })\r\n                    }else{\r\n                        Modal.warning({\r\n                            title:'警告',\r\n                            content: data.msg\r\n                        });\r\n                        fail(data)\r\n                    }\r\n                }\r\n            }else{\r\n                alert('请求遇到了问题，请稍后再尝试');\r\n                fail(data);\r\n            }\r\n            complete();\r\n        }\r\n    };\r\n    xml.send(postData);\r\n\r\n}\r\n\r\n\r\nexport default request;\r\n","let handleFormData = (data) => {\r\n    let ret = new FormData();\r\n    Object.keys(data).map(k => {\r\n        if(Array.isArray(data[k])){\r\n            data[k].forEach(d => {\r\n                ret.append(k,d);\r\n            })\r\n        }else{\r\n            ret.append(k,data[k]);\r\n        }\r\n    });\r\n    return ret;\r\n};\r\nexport default handleFormData;","let handleJson = (data) => {\r\n    return JSON.stringify(data);\r\n};\r\nexport default handleJson;","import React from 'react';\r\nimport { Modal, Form, Input, Button, Alert } from 'antd';\r\nclass UpdateModal extends React.Component{\r\n  render(){\r\n    let { visible, close, type } = this.props;\r\n    const { getFieldDecorator, isFieldTouched, getFieldError, getFieldsError } = this.props.form;\r\n    const typeNameErr = isFieldTouched('task_type_name') && getFieldError('task_type_name');\r\n    const timeWarnErr = isFieldTouched('time_warn') && getFieldError('time_warn');\r\n    const timeOutErr = isFieldTouched('time_out') && getFieldError('time_out');\r\n    return <Modal\r\n      footer={<div>\r\n        <Button onClick={() => close()}>取消</Button>\r\n        <Button type={'primary'} onClick={() => this.ensure()} disabled={this.hasErrors(getFieldsError(['task_type_name','time_warn', 'time_out']))}>确认</Button>\r\n      </div>}\r\n      visible={visible} title={'你正在编辑 '+ type.task_type_name}>\r\n        <Form>\r\n          <Form.Item\r\n            validateStatus={typeNameErr ? 'error' : ''} help={typeNameErr || ''}\r\n            label='任务类型'>\r\n            {getFieldDecorator('task_type_name', {\r\n              rules: [{\r\n                required: true,\r\n                message: '请输入任务类型名称'\r\n              }]\r\n            })(\r\n              <Input onChange={() => this.handleChange()} disabled={true}/>\r\n            )}\r\n          </Form.Item>\r\n          <Form.Item\r\n            validateStatus={timeWarnErr ? 'error' : ''} help={timeWarnErr || ''}\r\n            label='预警时间'>\r\n            {getFieldDecorator('time_warn', {\r\n              rules: [{\r\n                required: true,\r\n                message: '请输入预警时间'\r\n              }]\r\n            })(\r\n              <Input addonAfter={'小时 '}/>\r\n            )}\r\n          </Form.Item>\r\n          <Form.Item\r\n            validateStatus={timeOutErr ? 'error' : ''} help={timeOutErr || ''}\r\n            label='超时时间'>\r\n            {getFieldDecorator('time_out', {\r\n              rules: [{\r\n                required: true,\r\n                message: '请输入超时时间'\r\n              }]\r\n            })(\r\n              <Input addonAfter={'小时'}/>\r\n            )}\r\n          </Form.Item>\r\n        </Form>\r\n      <Alert type='warning' message='注意：编辑该任务类型的预警时间及超时时间将会影响相同任务类型的预警时间和超时时间'/>\r\n    </Modal>\r\n  }\r\n  componentWillReceiveProps(nextProps){\r\n    if(nextProps.type.task_type_id !== this.props.type.task_type_id){\r\n      this.setValue(nextProps.type);\r\n    }\r\n  }\r\n  setValue = (type) => {\r\n    this.props.form.setFields({\r\n      task_type_name: {\r\n        value: type.task_type_name\r\n      },\r\n      time_warn: {\r\n        value: type.time_warn\r\n      },\r\n      time_out: {\r\n        value: type.time_out\r\n      }\r\n    })\r\n  };\r\n  hasErrors = (fieldsError) => {\r\n    return Object.keys(fieldsError).some(field => fieldsError[field]);\r\n  };\r\n  ensure = () => {\r\n    let value = this.props.form.getFieldsValue();\r\n    let type = this.props.type;\r\n    this.props.ensure({\r\n      task_type_id: type.task_type_id,\r\n      ...value\r\n    });\r\n  }\r\n}\r\nlet UpdateModalForm = Form.create()(UpdateModal);\r\nexport default UpdateModalForm;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"setting_card\",\"form_item\":\"setting_form_item\",\"search_form\":\"setting_search_form\",\"system_btn_group\":\"setting_system_btn_group\"};"],"sourceRoot":""}