{"version":3,"sources":["webpack:///./helpers/request.js","webpack:///./helpers/handle-formdata.js","webpack:///./helpers/handle-json.js","webpack:///./helpers/handle-urlencode.js","webpack:///./helpers/export-file.js","webpack:///./pages/task/task.css","webpack:///./pages/task/task.js"],"names":["__webpack_require__","_ref","url","_ref$method","method","undefined","_ref$postType","postType","_ref$data","data","_ref$success","success","_ref$fail","fail","_ref$complete","complete","Error","xml","XMLHttpRequest","open","postData","setRequestHeader","_handleJson2","default","_handleFormdata2","onreadystatechange","readyState","status","JSON","parse","responseText","code","e","parseInt","_history2","push","_modal2","warning","title","content","msg","alert","send","ret","FormData","Object","keys","map","k","Array","isArray","forEach","d","append","stringify","key","join","_handleUrlencode","_ref$url","window","_handleUrlencode2","module","exports","card","status_select","fr","no_margin_item","search_form","operate_btn","table","btn_group","_react","Option","Search","antIcon","_react2","createElement","_icon2","type","style","fontSize","spin","current_states","finish_states","follow_states","Task","state","task_list","type_list","couldFollow","couldUnFollow","task_ids","current_state","loading","totalData","columns","dataIndex","render","text","record","index","finish_state","onClick","_this","handleDelete","id","finishTask","_divider2","setTimer","_ref2","_ref2$loop","loop","that","timer","setInterval","filterData","parseFloat","fetchTypeList","_request2","setState","fetchTaskList","keyword","task_type_id","time_warnCount","time_outCount","warn_ids","out_ids","t","finish_time","_moment2","format","nowTime","isAfter","warn_time","alarm","length","changeTaskState","change_target","_ref3","_notification3","close","warn","message","duration","description","queryData","params","otherParams","_objectWithoutProperties","queryParams","filter","every","q","values","some","indexOf","handleQuery","props","form","getFieldsValue","handleUpload","_ref4","action","file","onSuccess","onError","error","exportTask","_exportFile2","tasks","follow_state","_ref5","_ref5$success","_ref5$fail","followTask","unFollowTask","deleteAll","confirm","okText","cancelText","onOk","_this2","this","getFieldDecorator","_state","rowSelection","onChange","selectedRowKeys","selectedRows","ids","follow","unfollow","uploadOptions","name","withCredentials","customRequest","showUploadList","_card2","className","_task2","bordered","hoverable","_form2","layout","Item","label","initialValue","_select2","value","task_type_name","_button2","placeholder","enterButton","onSearch","_upload2","icon","_spin2","spinning","tip","indicator","_table2","pagination","showSizeChanger","hideOnSinglePage","defaultPageSize","pageSizeOptions","dataSource","rowKey","clearInterval","TaskForm","create"],"mappings":"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","file":"4_65db920ae6e6c8c2efe1.js","sourcesContent":["import handleJson from './handle-json';\r\nimport handleFormData from './handle-formdata';\r\nimport history from '../history'\r\nimport {Modal} from \"antd\";\r\n\r\nfunction request({ url, method = 'POST', postType = 'json' ,data = {}, success = () => {}, fail = () => {}, complete = () => {}}) {\r\n    if(!url){\r\n        throw new Error('url参数不可缺省');\r\n    }\r\n    let xml = new XMLHttpRequest();\r\n    xml.open(method, url);\r\n    let postData ;\r\n    switch (postType){\r\n        case 'json':\r\n            xml.setRequestHeader('Content-Type', 'application/json');\r\n            postData = handleJson(data);\r\n            break;\r\n        case 'formdata':\r\n            // xml.setRequestHeader('Content-Type', \"application/vnd.ms-excel\");\r\n            postData = handleFormData(data);\r\n            break;\r\n        default:\r\n            xml.setRequestHeader('Content-Type', 'application/json');\r\n            postData = handleJson(data);\r\n    }\r\n    xml.onreadystatechange = () => {\r\n        if(xml.readyState === 4){\r\n            if(xml.status === 200){\r\n                let data = JSON.parse(xml.responseText);\r\n                let code = data.code;\r\n                try{\r\n                    if(code === undefined) throw new Error('code is not defined');\r\n                }catch(e){\r\n                    data = JSON.parse(data);\r\n                }\r\n                if(parseInt(data.code) === 200){\r\n                    success(data);\r\n                }else{\r\n                    if(data.code === 403){\r\n                        history.push('/login');\r\n                        Modal.warning({\r\n                            title:'警告',\r\n                            content: data.msg\r\n                        })\r\n                    }else{\r\n                        Modal.warning({\r\n                            title:'警告',\r\n                            content: data.msg\r\n                        });\r\n                        fail(data)\r\n                    }\r\n                }\r\n            }else{\r\n                alert('请求遇到了问题，请稍后再尝试');\r\n                fail(data);\r\n            }\r\n            complete();\r\n        }\r\n    };\r\n    xml.send(postData);\r\n\r\n}\r\n\r\n\r\nexport default request;\r\n","let handleFormData = (data) => {\r\n    let ret = new FormData();\r\n    Object.keys(data).map(k => {\r\n        if(Array.isArray(data[k])){\r\n            data[k].forEach(d => {\r\n                ret.append(k,d);\r\n            })\r\n        }else{\r\n            ret.append(k,data[k]);\r\n        }\r\n    });\r\n    return ret;\r\n};\r\nexport default handleFormData;","let handleJson = (data) => {\r\n    return JSON.stringify(data);\r\n};\r\nexport default handleJson;","let handleUrlEncode = (data) => {\r\n    return Object.keys(data).map(key => {\r\n        return key + '=' + data[key];\r\n    }).join('&');\r\n};\r\nexport default handleUrlEncode;","import handleUrlEncode from './handle-urlencode';\r\nlet exportFile = ({url = '', data = {}}) => {\r\n    window.open(url + '?' + handleUrlEncode(data));\r\n};\r\nexport default exportFile;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"task_card\",\"status_select\":\"task_status_select\",\"fr\":\"task_fr\",\"no_margin_item\":\"task_no_margin_item\",\"search_form\":\"task_search_form\",\"operate_btn\":\"task_operate_btn\",\"table\":\"task_table\",\"btn_group\":\"task_btn_group\"};","import React, { Component } from 'react';\r\nimport moment from 'moment';\r\nimport style from './task.css';\r\nimport {Card, Form, Input, Select, Button, Table, Divider, Upload, notification, Modal, Spin, Icon} from 'antd';\r\nimport request from '../../helpers/request';\r\nimport exportFile from '../../helpers/export-file';\r\n\r\nconst { Option } = Select;\r\nconst { Search } = Input;\r\nconst antIcon = <Icon type=\"loading\" style={{ fontSize: 24 }} spin />;\r\n\r\nlet current_states = ['全部', '未预警', '已预警','超时 '];\r\nlet finish_states = ['全部', '未完成', '已完成'];\r\nlet follow_states = ['', '跟踪中', '暂停跟踪'];\r\nclass Task extends Component{\r\n    state = {\r\n        task_list: [],\r\n        type_list: [],\r\n        couldFollow: false,\r\n        couldUnFollow: false,\r\n        task_ids: '',\r\n        current_state: 0,\r\n        loading: false\r\n    };\r\n    totalData = [];\r\n    columns = [{\r\n        title: '编号',\r\n        dataIndex: 'id'\r\n    },{\r\n        title: '任务名称',\r\n        dataIndex: 'task_name'\r\n    }, {\r\n        title: '任务类型',\r\n        dataIndex: 'task_type_name'\r\n    }, {\r\n        title: '完成时间',\r\n        dataIndex: 'finish_time'\r\n    }, {\r\n        title: '当前状态',\r\n        dataIndex: 'current_state',\r\n        render:(text, record, index) => (<span>{current_states[text]}</span>)\r\n    }, {\r\n        title: '完成状态',\r\n        dataIndex: 'finish_state',\r\n        render: (text) => {\r\n            return <span>{finish_states[text]}</span>\r\n        }\r\n    }, {\r\n        title: '跟踪状态',\r\n        dataIndex: 'follow_state',\r\n        render:(text) => {\r\n            return <span>{follow_states[text] || '无'}</span>\r\n        }\r\n\r\n    }, {\r\n        title: '操作',\r\n        render: (text, record) => record.finish_state === 2 ?\r\n        (\r\n            <span>\r\n                <a onClick={() => this.handleDelete(record.id)}>删除</a>\r\n            </span>\r\n        ) : (\r\n            <span>\r\n                <a onClick={() => this.finishTask(record.id)}>完成</a>\r\n                <Divider type=\"vertical\" />\r\n                <a onClick={() => this.handleDelete(record.id)}>删除</a>\r\n            </span>\r\n        )\r\n    }];\r\n    render(){\r\n        const { getFieldDecorator } = this.props.form;\r\n        let { task_list, type_list, couldFollow, couldUnFollow, task_ids, loading } = this.state;\r\n        let rowSelection = {\r\n            onChange: (selectedRowKeys, selectedRows) => {\r\n                let ids = selectedRowKeys.join(',');\r\n                if(!selectedRows.length){\r\n                    this.setState({\r\n                        couldUnFollow: false,\r\n                        couldFollow: false,\r\n                        task_ids: ''\r\n                    })\r\n                }else{\r\n                    let follow = this.couldFollow(selectedRows);\r\n                    let unfollow = this.couldUnFollow(selectedRows);\r\n                    this.setState({\r\n                        couldUnFollow: unfollow,\r\n                        couldFollow: follow,\r\n                        task_ids: ids\r\n                    })\r\n                }\r\n\r\n            }\r\n        };\r\n        let uploadOptions = {\r\n            name: 'file',\r\n            action: '/api/import_task',\r\n            withCredentials: true,\r\n            customRequest: this.handleUpload,\r\n            showUploadList: false\r\n        };\r\n        return (\r\n            <div>\r\n                <Card className={style.card} bordered={false} hoverable>\r\n                    <Form layout=\"inline\" className={style.search_form}>\r\n                        <Form.Item label={'当前状态'}>\r\n                            {getFieldDecorator('current_state', {\r\n                                initialValue: 0\r\n                            })(\r\n                                <Select className={style.status_select}>\r\n                                    <Option value={0}>全部</Option>\r\n                                    <Option value={1}>未预警</Option>\r\n                                    <Option value={2}>预警</Option>\r\n                                    <Option value={3}>超时</Option>\r\n                                </Select>\r\n                            )}\r\n                        </Form.Item>\r\n                        <Form.Item\r\n                            label={'完成状态'}\r\n                        >\r\n                            {getFieldDecorator('finish_state', {\r\n                                initialValue: 0\r\n                            })(\r\n                                <Select className={style.status_select}>\r\n                                    <Option value={0}>全部</Option>\r\n                                    <Option value={1}>未完成</Option>\r\n                                    <Option value={2}>已完成</Option>\r\n                                </Select>\r\n                            )}\r\n                        </Form.Item>\r\n                        <Form.Item\r\n                            label={'任务类型'}\r\n                        >\r\n                            {getFieldDecorator('task_type_id', {\r\n                                initialValue: 0\r\n                            })(\r\n                                <Select\r\n                                    className={style.status_select}>\r\n                                    <Option value={0}>全部</Option>\r\n                                    {type_list.map(type => <Option key={type.task_type_id} value={type.task_type_id}>{type.task_type_name}</Option>)}\r\n                                </Select>\r\n                            )}\r\n                        </Form.Item>\r\n                        <Form.Item>\r\n                            <Button\r\n                                onClick={this.handleQuery}\r\n                                type={'primary'}>查询</Button>\r\n                        </Form.Item>\r\n                        <Form.Item className={style.fr}>\r\n                            {getFieldDecorator('keyword', {\r\n                                initialValue: ''\r\n                            })(\r\n                                <Search\r\n                                    placeholder={'请输入其他关键字'}\r\n                                    enterButton\r\n                                    onSearch={this.handleQuery}\r\n                                />\r\n                            )\r\n                            }\r\n                        </Form.Item>\r\n                    </Form>\r\n                    <div className={style.btn_group}>\r\n                        <Upload { ...uploadOptions}>\r\n                            <Button className={style.operate_btn} icon='upload' type='primary'>导入</Button>\r\n                        </Upload>\r\n                        <div>\r\n                            <Button className={style.operate_btn} icon='download' onClick={() => this.exportTask()}>导出</Button>\r\n                            {couldFollow ? <Button className={style.operate_btn} type={'warn'} onClick={this.followTask}>跟踪</Button> : null}\r\n                            {couldUnFollow ? <Button className={style.operate_btn} onClick={this.unFollowTask}>暂停跟踪</Button> : null}\r\n                            <Button className={style.operate_btn} onClick={() => this.handleDelete(task_ids)}>删除</Button>\r\n                            <Button type='danger' onClick={() => this.deleteAll()}>清空库</Button>\r\n                        </div>\r\n                    </div>\r\n                </Card>\r\n                <Card className={style.card + ' ' + style.table } bordered={false}>\r\n                    <Spin spinning={loading} tip='加载中...' indicator={antIcon}>\r\n                        <Table pagination={{showSizeChanger: true, hideOnSinglePage: true, defaultPageSize: 20, pageSizeOptions: ['20', '50', '100', '200']}} rowSelection={rowSelection} columns={this.columns} dataSource={task_list} rowKey='id'/>\r\n                    </Spin>\r\n                </Card>\r\n            </div>\r\n        )\r\n    }\r\n    componentDidMount(){\r\n        this.fetchTaskList();\r\n        this.fetchTypeList();\r\n    }\r\n    componentWillMount(){\r\n        clearInterval(this.timer);\r\n    }\r\n    //设置定时器；\r\n    setTimer = ({loop = 10}) => {\r\n        let that = this;\r\n        this.timer = setInterval(() => {\r\n            that.filterData(that.totalData);\r\n        }, parseFloat(loop) * 60000);\r\n    };\r\n    //获取任务类型列表\r\n    fetchTypeList = () => {\r\n        request({\r\n            url: '/api/get_config',\r\n            success: (data) => {\r\n                let { table, loop } = data;\r\n                //获取到查询周期后，设置定时器\r\n                this.setTimer({loop});\r\n                this.setState({\r\n                    type_list: table || []\r\n                })\r\n            }\r\n        })\r\n    };\r\n    //获取任务列表\r\n    fetchTaskList = () => {\r\n        let that = this;\r\n        this.setState({\r\n            loading: true\r\n        });\r\n        request({\r\n            url: '/api/get_task_list',\r\n            data: {\r\n                keyword: '',\r\n                current_state: 0,\r\n                finish_state: 0,\r\n                task_type_id: 0\r\n            },\r\n            success: (data) => {\r\n                let { table } = data;\r\n                this.filterData(table);\r\n                this.totalData = table;\r\n                that.setState({\r\n                    task_list: table\r\n                })\r\n            },\r\n            complete: () => {\r\n                this.setState({\r\n                    loading: false\r\n                })\r\n            }\r\n        })\r\n    };\r\n    filterData = (table) => {\r\n        let time_warnCount = 0;\r\n        let time_outCount = 0;\r\n        let warn_ids = [],\r\n            out_ids = [];\r\n        table.forEach(t => {\r\n            t.finish_state = t.finish_state || 1;\r\n            if(t.finish_time){\r\n                t.finish_time = moment(t.finish_time).format('YYYY-MM-DD HH:mm:ss');\r\n                let nowTime = moment();\r\n                if(t.finish_state === 1){\r\n                    if(nowTime.isAfter(t.finish_time)){\r\n                        if(t.current_state !== 3){\r\n                            out_ids.push(t.id);\r\n                        }\r\n                        t.current_state = 3;\r\n                        time_outCount++;\r\n                    }else if(nowTime.isAfter(t.warn_time)){\r\n                        if(t.current_state !== 2){\r\n                            warn_ids.push(t.id);\r\n                        }\r\n                        t.current_state = 2;\r\n                        time_warnCount++;\r\n                    }else{\r\n                        t.current_state = 1;\r\n                    }\r\n                }\r\n            }\r\n\r\n        });\r\n        this.alarm({time_warnCount, time_outCount});\r\n        if(!!warn_ids.length){\r\n            this.changeTaskState({\r\n                data: {\r\n                    task_ids: warn_ids.join(','),\r\n                    state: 2,\r\n                    change_target: 'current_state'\r\n                }\r\n            });\r\n        }\r\n        if(!!out_ids.length){\r\n            this.changeTaskState({\r\n                data: {\r\n                    task_ids: out_ids.join(','),\r\n                    state: 3,\r\n                    change_target: 'current_state'\r\n                }\r\n            })\r\n        }\r\n    };\r\n    //任务提醒\r\n    alarm = ({time_warnCount, time_outCount}) => {\r\n        notification.close('alarm');\r\n        notification.warn({\r\n            message: '任务提醒',\r\n            duration: null,\r\n            key: 'alarm',\r\n            description: <div>\r\n                {time_warnCount ? <p>有{time_warnCount}个预警任务未完成</p> : null}\r\n                {time_outCount ? <p>有{time_outCount}个超时任务未完成</p> : null}\r\n            </div>\r\n        })\r\n    };\r\n    //改变参数筛选数据\r\n    queryData = (params) => {\r\n        let { keyword, ...otherParams } = params;\r\n        let queryParams = Object.keys(otherParams).filter(k => params[k] !== 0);\r\n        let data = this.totalData;\r\n        if(queryParams.length){\r\n            data = this.totalData.filter(t => queryParams.every(q => t[q] === params[q]));\r\n        }\r\n        if(keyword){\r\n            data = data.filter(t => Object.values(t).some(d => ('' + d).indexOf(keyword) !== -1));\r\n        }\r\n        this.setState({\r\n            task_list: data\r\n        });\r\n    };\r\n    //查询\r\n    handleQuery = () => {\r\n        let values = this.props.form.getFieldsValue();\r\n        let { current_state, finish_state, task_type_id, keyword } = values;\r\n        this.queryData({ current_state, finish_state, task_type_id, keyword });\r\n    };\r\n    //导入文件\r\n    handleUpload = ({action, file, onSuccess, onError}) => {\r\n        let that = this;\r\n        request({\r\n            url: action,\r\n            postType: 'formdata',\r\n            data: {\r\n                file: file\r\n            },\r\n            success:() => {\r\n                onSuccess();\r\n                that.fetchTaskList();\r\n                notification.success({\r\n                    message: '导入成功'\r\n                })\r\n            },\r\n            fail: (data) => {\r\n                onError();\r\n                notification.error({\r\n                    message: '导入失败',\r\n                    description: data.msg\r\n                })\r\n            }\r\n        })\r\n    };\r\n    exportTask = () => {\r\n        let values = this.props.form.getFieldsValue();\r\n        let { current_state, finish_state, task_type_id, keyword } = values;\r\n        exportFile({\r\n            url: '/api/export_task',\r\n            data: {\r\n                current_state,\r\n                finish_state,\r\n                task_type_id,\r\n                keyword\r\n            }\r\n        })\r\n    };\r\n    //删除\r\n    handleDelete = (task_ids) => {\r\n        let that = this;\r\n        request({\r\n            url: '/api/delete_task_list',\r\n            data: {\r\n                task_ids: task_ids\r\n            },\r\n            success: () => {\r\n                notification.success({\r\n                    message: \"删除成功\"\r\n                });\r\n                that.fetchTaskList();\r\n            }\r\n        })\r\n    };\r\n    couldFollow = (tasks) => {\r\n        return !tasks.some((t) => t.follow_state === 1);\r\n    };\r\n    couldUnFollow = (tasks) => {\r\n        return !tasks.some((t) => t.follow_state === 2);\r\n    };\r\n    //更改状态\r\n    changeTaskState = ({data, success = () => {}, fail = () => {}}) => {\r\n        request({\r\n            url: \"/api/change_state\",\r\n            data: data,\r\n            success,\r\n            fail\r\n        })\r\n    };\r\n    //跟踪任务\r\n    followTask = () => {\r\n        let { task_ids } = this.state;\r\n        this.changeTaskState({\r\n            data: {\r\n                change_target: 'follow_state',\r\n                state: 1,\r\n                task_ids\r\n            },\r\n            success: () => {\r\n                notification.success({\r\n                    message: '已为你跟踪所选任务'\r\n                });\r\n                this.fetchTaskList();\r\n            }\r\n        })\r\n    };\r\n    //暂停跟踪任务\r\n    unFollowTask = () => {\r\n        let { task_ids } = this.state;\r\n        this.changeTaskState({\r\n            data: {\r\n                change_target: 'follow_state',\r\n                state: 2,\r\n                task_ids\r\n            },\r\n            success: () => {\r\n                notification.success({\r\n                    message: '已为你跟踪所选任务'\r\n                });\r\n                this.fetchTaskList();\r\n            }\r\n        })\r\n    };\r\n    //完成任务\r\n    finishTask = (task_ids) => {\r\n        this.changeTaskState({\r\n            data: {\r\n                change_target: 'finish_state',\r\n                state: 2,\r\n                task_ids\r\n            },\r\n            success: (data) => {\r\n                notification.success({\r\n                    message: '做好了!  '\r\n                });\r\n                this.fetchTaskList();\r\n            }\r\n        })\r\n    };\r\n    deleteAll = () => {\r\n        Modal.confirm({\r\n            title: '危险操作！你正在执行清空库操作',\r\n            content: '将删除所有任务，请确保已经做好了备份工作！',\r\n            okText: '确认',\r\n            cancelText: '取消',\r\n            onOk: () => this.handleDelete('-1')\r\n        })\r\n    }\r\n}\r\nconst TaskForm = Form.create()(Task);\r\nexport default TaskForm;"],"sourceRoot":""}