{"version":3,"sources":["webpack:///./components/update-modal.js","webpack:///./pages/setting/setting.css","webpack:///./pages/setting/setting.js"],"names":["_react","__webpack_require__","UpdateModal","setValue","type","_this","props","form","setFields","task_type_name","value","time_warn","time_out","hasErrors","fieldsError","Object","keys","some","field","ensure","getFieldsValue","_extends","task_type_id","_this2","this","_props","visible","close","_props$form","getFieldDecorator","isFieldTouched","getFieldError","getFieldsError","typeNameErr","timeWarnErr","timeOutErr","_react2","default","createElement","_modal2","footer","_button2","onClick","disabled","title","_form2","Item","validateStatus","help","label","rules","required","message","_input2","onChange","handleChange","addonAfter","_alert2","nextProps","Component","UpdateModalForm","create","module","exports","card","form_item","search_form","system_btn_group","_reactRouterDom","_setting","_request","_updateModal","Setting","state","taskTypeList","loop","addTypeErr","updating","updateType","columns","dataIndex","render","time","id","record","updateING","style","marginRight","deleteType","fetchTaskTypeList","_request2","url","data","success","table","setState","handleAddTaskType","e","preventDefault","that","validateFields","err","values","_notification3","description","fail","closeModal","_ref2","res","handleSetLoop","loop_time","_state","loopErr","_updateModal2","_card2","className","_setting2","bordered","onSubmit","layout","_row2","gutter","_col2","span","icon","htmlType","_table2","dataSource","rowKey","pagination","name","initialValue","validator","rule","cb","parseFloat","pattern","autoComplete","Link","to","SettingForm"],"mappings":"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","file":"scripts/9.7a01073a4f256ee6d757.js","sourcesContent":["import React from 'react';\r\nimport { Modal, Form, Input, Button, Alert } from 'antd';\r\nclass UpdateModal extends React.Component{\r\n  render(){\r\n    let { visible, close, type } = this.props;\r\n    const { getFieldDecorator, isFieldTouched, getFieldError, getFieldsError } = this.props.form;\r\n    const typeNameErr = isFieldTouched('task_type_name') && getFieldError('task_type_name');\r\n    const timeWarnErr = isFieldTouched('time_warn') && getFieldError('time_warn');\r\n    const timeOutErr = isFieldTouched('time_out') && getFieldError('time_out');\r\n    return <Modal\r\n      footer={<div>\r\n        <Button onClick={() => close()}>取消</Button>\r\n        <Button type={'primary'} onClick={() => this.ensure()} disabled={this.hasErrors(getFieldsError(['task_type_name','time_warn', 'time_out']))}>确认</Button>\r\n      </div>}\r\n      visible={visible} title={'你正在编辑 '+ type.task_type_name}>\r\n        <Form>\r\n          <Form.Item\r\n            validateStatus={typeNameErr ? 'error' : ''} help={typeNameErr || ''}\r\n            label='任务类型'>\r\n            {getFieldDecorator('task_type_name', {\r\n              rules: [{\r\n                required: true,\r\n                message: '请输入任务类型名称'\r\n              }]\r\n            })(\r\n              <Input onChange={() => this.handleChange()} disabled={true}/>\r\n            )}\r\n          </Form.Item>\r\n          <Form.Item\r\n            validateStatus={timeWarnErr ? 'error' : ''} help={timeWarnErr || ''}\r\n            label='预警时间'>\r\n            {getFieldDecorator('time_warn', {\r\n              rules: [{\r\n                required: true,\r\n                message: '请输入预警时间'\r\n              }]\r\n            })(\r\n              <Input addonAfter={'小时 '}/>\r\n            )}\r\n          </Form.Item>\r\n          <Form.Item\r\n            validateStatus={timeOutErr ? 'error' : ''} help={timeOutErr || ''}\r\n            label='超时时间'>\r\n            {getFieldDecorator('time_out', {\r\n              rules: [{\r\n                required: true,\r\n                message: '请输入超时时间'\r\n              }]\r\n            })(\r\n              <Input addonAfter={'小时'}/>\r\n            )}\r\n          </Form.Item>\r\n        </Form>\r\n      <Alert type='warning' message='注意：编辑该任务类型的预警时间及超时时间将会影响相同任务类型的预警时间和超时时间'/>\r\n    </Modal>\r\n  }\r\n  componentWillReceiveProps(nextProps){\r\n    if(nextProps.type.task_type_id !== this.props.type.task_type_id){\r\n      this.setValue(nextProps.type);\r\n    }\r\n  }\r\n  setValue = (type) => {\r\n    this.props.form.setFields({\r\n      task_type_name: {\r\n        value: type.task_type_name\r\n      },\r\n      time_warn: {\r\n        value: type.time_warn\r\n      },\r\n      time_out: {\r\n        value: type.time_out\r\n      }\r\n    })\r\n  };\r\n  hasErrors = (fieldsError) => {\r\n    return Object.keys(fieldsError).some(field => fieldsError[field]);\r\n  };\r\n  ensure = () => {\r\n    let value = this.props.form.getFieldsValue();\r\n    let type = this.props.type;\r\n    this.props.ensure({\r\n      task_type_id: type.task_type_id,\r\n      ...value\r\n    });\r\n  }\r\n}\r\nlet UpdateModalForm = Form.create()(UpdateModal);\r\nexport default UpdateModalForm;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"setting__card\",\"form_item\":\"setting__form_item\",\"search_form\":\"setting__search_form\",\"system_btn_group\":\"setting__system_btn_group\"};","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Card, Form, Input,Row,Col, Button, Table, notification, Modal  } from 'antd';\r\nimport style from './setting.css';\r\nimport request from '../../helpers/request';\r\nimport UpdateModal from '../../components/update-modal';\r\nclass Setting extends React.Component{\r\n    state = {\r\n        taskTypeList: [],\r\n        loop: '',\r\n        addTypeErr: false,\r\n        updating: false,\r\n        updateType: {}\r\n    };\r\n    columns = [{\r\n        title: '任务类型',\r\n        dataIndex: 'task_type_name'\r\n    },{\r\n        title: '预警时间',\r\n        dataIndex: 'time_warn',\r\n        render: (time) => <span>提前{time}小时</span>\r\n    }, {\r\n        title: '超时时间',\r\n        dataIndex: 'time_out',\r\n        render: (time) => <span>提前{time}小时</span>\r\n    }, {\r\n        title: '操作',\r\n        dataIndex: 'task_type_id',\r\n        render: (id, record) => <span>\r\n            <a onClick={() => this.updateING(record)} style={{marginRight: '8px'}}>修改</a>\r\n            <a onClick={() => this.deleteType(id)}>删除</a>\r\n        </span>\r\n    }];\r\n    render(){\r\n        const { getFieldDecorator, isFieldTouched, getFieldError, getFieldsError } = this.props.form;\r\n        const  { taskTypeList, loop, addTypeErr, updating , updateType} = this.state;\r\n        const typeNameErr = isFieldTouched('task_type_name') && getFieldError('task_type_name') || addTypeErr;\r\n        const timeWarnErr = isFieldTouched('time_warn') && getFieldError('time_warn');\r\n        const timeOutErr = isFieldTouched('time_out') && getFieldError('time_out');\r\n        const loopErr = isFieldTouched('loop') && getFieldError('loop');\r\n        return (\r\n            <div>\r\n                <UpdateModal visible={updating} type={updateType} ensure={(value) => this.updateType(value)} close={() => this.closeModal()}/>\r\n                <Card title={'任务设置'} className={style.card} bordered={false}>\r\n                    <Form\r\n                        onSubmit={this.handleAddTaskType}\r\n                        layout=\"inline\" className={style.search_form}>\r\n                        <Row gutter={24}>\r\n                            <Col span={7}>\r\n                                <Form.Item\r\n                                    validateStatus={typeNameErr ? 'error' : ''} help={typeNameErr || ''}\r\n                                    label='任务类型' className={style.form_item}>\r\n                                    {getFieldDecorator('task_type_name', {\r\n                                        rules: [{\r\n                                            required: true,\r\n                                            message: '请输入任务类型名称'\r\n                                        }]\r\n                                    })(\r\n                                        <Input onChange={() => this.handleChange()}/>\r\n                                    )}\r\n                                </Form.Item>\r\n                            </Col>\r\n                            <Col span={7}>\r\n                                <Form.Item\r\n                                    validateStatus={timeWarnErr ? 'error' : ''} help={timeWarnErr || ''}\r\n                                    label='预警时间' className={style.form_item}>\r\n                                    {getFieldDecorator('time_warn', {\r\n                                        rules: [{\r\n                                            required: true,\r\n                                            message: '请输入预警时间'\r\n                                        }]\r\n                                    })(\r\n                                        <Input addonAfter={'小时 '}/>\r\n                                    )}\r\n                                </Form.Item>\r\n                            </Col>\r\n                            <Col span={7}>\r\n                                <Form.Item\r\n                                    validateStatus={timeOutErr ? 'error' : ''} help={timeOutErr || ''}\r\n                                    label='超时时间' className={style.form_item}>\r\n                                    {getFieldDecorator('time_out', {\r\n                                        rules: [{\r\n                                            required: true,\r\n                                            message: '请输入超时时间'\r\n                                        }]\r\n                                    })(\r\n                                        <Input addonAfter={'小时'}/>\r\n                                    )}\r\n                                </Form.Item>\r\n                            </Col>\r\n                            <Col>\r\n                                <Form.Item>\r\n                                    <Button\r\n                                        disabled={this.hasErrors(getFieldsError(['task_type_name','time_warn', 'time_out']))}\r\n                                        type=\"primary\" icon={'plus'} htmlType=\"submit\">新增</Button>\r\n                                </Form.Item>\r\n                            </Col>\r\n                        </Row>\r\n                    </Form>\r\n                </Card>\r\n                <Card className={style.card } bordered={false}>\r\n                    <Table columns={this.columns} dataSource={taskTypeList} rowKey='task_type_id' pagination={false}/>\r\n                </Card>\r\n                <Card title={'系统设置'} className={style.card} bordered={false}>\r\n                    <Form\r\n                        name='form2'\r\n                        onSubmit={this.handleSetLoop}\r\n                        layout=\"inline\" className={style.search_form}>\r\n                        <Row gutter={24}>\r\n                            <Col span={8}>\r\n                                <Form.Item\r\n                                    validateStatus={loopErr ? 'error' : ''} help={loopErr || ''}\r\n                                    label='查询周期' className={style.form_item}>\r\n                                    {getFieldDecorator('loop', {\r\n                                        initialValue: loop,\r\n                                        rules: [{\r\n                                            required: true,\r\n                                            message: '请输入查询周期'\r\n                                        },{\r\n                                            validator: (rule, value, cb) => parseFloat(value) === parseFloat(loop) ? cb('请输入一个新的查询周期') : cb(),\r\n                                            pattern: /^[1-9]\\d*$/\r\n                                        }],\r\n                                    })(\r\n                                        <Input\r\n                                            autoComplete={'off'}\r\n                                            addonAfter={'分钟'} />\r\n                                    )}\r\n                                </Form.Item>\r\n                            </Col>\r\n                        </Row>\r\n                        <Form.Item className={style.system_btn_group}>\r\n                            <Link to='/'>\r\n                                <Button type=\"default\" style={{marginRight: '16px'}}>返回</Button>\r\n                            </Link>\r\n                            <Button\r\n                                disabled={!isFieldTouched('loop') || this.hasErrors(getFieldsError(['loop']))}\r\n                                type=\"primary\" htmlType=\"submit\">保存</Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </Card>\r\n            </div>\r\n        )\r\n    }\r\n    componentDidMount(){\r\n        this.props.form.validateFields();\r\n        this.fetchTaskTypeList();\r\n    }\r\n    hasErrors = (fieldsError) => {\r\n        return Object.keys(fieldsError).some(field => fieldsError[field]);\r\n    };\r\n    fetchTaskTypeList = () => {\r\n        request({\r\n            url: '/api/get_config',\r\n            data: {},\r\n            success: (data) => {\r\n                const { table, loop } = data;\r\n                this.props.form.setFields({\r\n                    loop: {\r\n                        value: loop\r\n                    }\r\n                });\r\n                this.setState({\r\n                    taskTypeList: table || [],\r\n                    loop\r\n                })\r\n            }\r\n        })\r\n    };\r\n    handleAddTaskType = (e) => {\r\n        e.preventDefault();\r\n        let that = this;\r\n        this.props.form.validateFields(['task_type_name','time_warn', 'time_out'],(err, values) => {\r\n            if(!err){\r\n                let { task_type_name, time_warn, time_out } = values;\r\n                request({\r\n                    url: '/api/add_type',\r\n                    data: {\r\n                        task_type_name,\r\n                        time_warn,\r\n                        time_out\r\n                    },\r\n                    success: (data) => {\r\n                        notification.success({\r\n                            message: '新增任务类型成功',\r\n                            description: ''\r\n                        });\r\n                        that.props.form.setFields({\r\n                            task_type_name: '',\r\n                            time_warn: '',\r\n                            time_out: ''\r\n                        });\r\n                        that.props.form.validateFields();\r\n                        that.fetchTaskTypeList();\r\n                    },\r\n                    fail: (data) => {\r\n                        this.setState({\r\n                            addTypeErr: '不可重复新增'\r\n                        })\r\n                    }\r\n                })\r\n            }\r\n        });\r\n    };\r\n  updateING = (type) => {\r\n      this.setState({\r\n        updating: true,\r\n        updateType: type\r\n      })\r\n  };\r\n  closeModal = () => {\r\n    this.setState({\r\n      updating: false\r\n    })\r\n  };\r\n  updateType = ({task_type_id, time_warn, time_out}) => {\r\n      request({\r\n        url: '/api/update_type',\r\n        data: {\r\n          task_type_id: task_type_id,\r\n          time_warn: time_warn,\r\n          time_out: time_out\r\n        },\r\n        success: (res) => {\r\n          notification.success({\r\n            message: '修改任务类型成功'\r\n          });\r\n          this.closeModal();\r\n          this.fetchTaskTypeList();\r\n        }\r\n      })\r\n  };\r\n    deleteType = (id) => {\r\n        request({\r\n            url: '/api/delete_type',\r\n            data: {\r\n                task_type_id: id\r\n            },\r\n            success: () => {\r\n                notification.success({\r\n                    message: '删除任务类型成功'\r\n                });\r\n                this.fetchTaskTypeList();\r\n            }\r\n        })\r\n    };\r\n    handleSetLoop = (e) => {\r\n        e.preventDefault();\r\n        let that = this;\r\n        this.props.form.validateFields(['loop'],(err, values) => {\r\n            if(!err){\r\n                request({\r\n                    url: '/api/set_loop',\r\n                    data: {\r\n                        loop_time: values.loop\r\n                    },\r\n                    success: () => {\r\n                        notification.success({\r\n                            message: '设置查询周期成功',\r\n                            description: `设置成功后将每隔${values.loop}分钟自动刷新一次`\r\n                        });\r\n                        that.fetchTaskTypeList();\r\n                    }\r\n                })\r\n            }\r\n        })\r\n    };\r\n    handleChange = () => {\r\n        this.setState({\r\n            addTypeErr: false\r\n        })\r\n    }\r\n}\r\nlet SettingForm = Form.create()(Setting);\r\nexport default SettingForm;"],"sourceRoot":""}