{"version":3,"sources":["webpack:///./pages/setting/setting.js","webpack:///./components/update-modal.js","webpack:///./pages/setting/setting.css"],"names":["_react","__webpack_require__","_reactRouterDom","_setting","_request","_updateModal","Setting","state","taskTypeList","loop","addTypeErr","updating","updateType","columns","title","dataIndex","render","time","_react2","default","createElement","id","record","onClick","_this","updateING","style","marginRight","deleteType","hasErrors","fieldsError","Object","keys","some","field","fetchTaskTypeList","_request2","url","data","success","table","props","form","setFields","value","setState","handleAddTaskType","e","preventDefault","that","validateFields","err","values","task_type_name","time_warn","time_out","_notification3","message","description","fail","type","closeModal","_ref2","task_type_id","res","handleSetLoop","loop_time","handleChange","_this2","this","_props$form","getFieldDecorator","isFieldTouched","getFieldError","getFieldsError","_state","typeNameErr","timeWarnErr","timeOutErr","loopErr","_updateModal2","visible","ensure","close","_card2","className","_setting2","card","bordered","_form2","onSubmit","layout","search_form","_row2","gutter","_col2","span","Item","validateStatus","help","label","form_item","rules","required","_input2","onChange","addonAfter","_button2","disabled","icon","htmlType","_table2","dataSource","rowKey","pagination","name","initialValue","validator","rule","cb","parseFloat","pattern","autoComplete","system_btn_group","Link","to","Component","SettingForm","create","UpdateModal","setValue","getFieldsValue","_extends","_props","_modal2","footer","_alert2","nextProps","UpdateModalForm","module","exports"],"mappings":"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","file":"scripts/5.fc24f733b4cb3df04d59.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Card, Form, Input,Row,Col, Button, Table, notification, Modal  } from 'antd';\r\nimport style from './setting.css';\r\nimport request from '../../helpers/request';\r\nimport UpdateModal from '../../components/update-modal';\r\nclass Setting extends React.Component{\r\n    state = {\r\n        taskTypeList: [],\r\n        loop: '',\r\n        addTypeErr: false,\r\n        updating: false,\r\n        updateType: {}\r\n    };\r\n    columns = [{\r\n        title: '任务类型',\r\n        dataIndex: 'task_type_name'\r\n    },{\r\n        title: '预警时间',\r\n        dataIndex: 'time_warn',\r\n        render: (time) => <span>提前{time}小时</span>\r\n    }, {\r\n        title: '超时时间',\r\n        dataIndex: 'time_out',\r\n        render: (time) => <span>提前{time}小时</span>\r\n    }, {\r\n        title: '操作',\r\n        dataIndex: 'task_type_id',\r\n        render: (id, record) => <span>\r\n            <a onClick={() => this.updateING(record)} style={{marginRight: '8px'}}>修改</a>\r\n            <a onClick={() => this.deleteType(id)}>删除</a>\r\n        </span>\r\n    }];\r\n    render(){\r\n        const { getFieldDecorator, isFieldTouched, getFieldError, getFieldsError } = this.props.form;\r\n        const  { taskTypeList, loop, addTypeErr, updating , updateType} = this.state;\r\n        const typeNameErr = isFieldTouched('task_type_name') && getFieldError('task_type_name') || addTypeErr;\r\n        const timeWarnErr = isFieldTouched('time_warn') && getFieldError('time_warn');\r\n        const timeOutErr = isFieldTouched('time_out') && getFieldError('time_out');\r\n        const loopErr = isFieldTouched('loop') && getFieldError('loop');\r\n        return (\r\n            <div>\r\n                <UpdateModal visible={updating} type={updateType} ensure={(value) => this.updateType(value)} close={() => this.closeModal()}/>\r\n                <Card title={'任务设置'} className={style.card} bordered={false}>\r\n                    <Form\r\n                        onSubmit={this.handleAddTaskType}\r\n                        layout=\"inline\" className={style.search_form}>\r\n                        <Row gutter={24}>\r\n                            <Col span={7}>\r\n                                <Form.Item\r\n                                    validateStatus={typeNameErr ? 'error' : ''} help={typeNameErr || ''}\r\n                                    label='任务类型' className={style.form_item}>\r\n                                    {getFieldDecorator('task_type_name', {\r\n                                        rules: [{\r\n                                            required: true,\r\n                                            message: '请输入任务类型名称'\r\n                                        }]\r\n                                    })(\r\n                                        <Input onChange={() => this.handleChange()}/>\r\n                                    )}\r\n                                </Form.Item>\r\n                            </Col>\r\n                            <Col span={7}>\r\n                                <Form.Item\r\n                                    validateStatus={timeWarnErr ? 'error' : ''} help={timeWarnErr || ''}\r\n                                    label='预警时间' className={style.form_item}>\r\n                                    {getFieldDecorator('time_warn', {\r\n                                        rules: [{\r\n                                            required: true,\r\n                                            message: '请输入预警时间'\r\n                                        }]\r\n                                    })(\r\n                                        <Input addonAfter={'小时 '}/>\r\n                                    )}\r\n                                </Form.Item>\r\n                            </Col>\r\n                            <Col span={7}>\r\n                                <Form.Item\r\n                                    validateStatus={timeOutErr ? 'error' : ''} help={timeOutErr || ''}\r\n                                    label='超时时间' className={style.form_item}>\r\n                                    {getFieldDecorator('time_out', {\r\n                                        rules: [{\r\n                                            required: true,\r\n                                            message: '请输入超时时间'\r\n                                        }]\r\n                                    })(\r\n                                        <Input addonAfter={'小时'}/>\r\n                                    )}\r\n                                </Form.Item>\r\n                            </Col>\r\n                            <Col>\r\n                                <Form.Item>\r\n                                    <Button\r\n                                        disabled={this.hasErrors(getFieldsError(['task_type_name','time_warn', 'time_out']))}\r\n                                        type=\"primary\" icon={'plus'} htmlType=\"submit\">新增</Button>\r\n                                </Form.Item>\r\n                            </Col>\r\n                        </Row>\r\n                    </Form>\r\n                </Card>\r\n                <Card className={style.card } bordered={false}>\r\n                    <Table columns={this.columns} dataSource={taskTypeList} rowKey='task_type_id' pagination={false}/>\r\n                </Card>\r\n                <Card title={'系统设置'} className={style.card} bordered={false}>\r\n                    <Form\r\n                        name='form2'\r\n                        onSubmit={this.handleSetLoop}\r\n                        layout=\"inline\" className={style.search_form}>\r\n                        <Row gutter={24}>\r\n                            <Col span={8}>\r\n                                <Form.Item\r\n                                    validateStatus={loopErr ? 'error' : ''} help={loopErr || ''}\r\n                                    label='查询周期' className={style.form_item}>\r\n                                    {getFieldDecorator('loop', {\r\n                                        initialValue: loop,\r\n                                        rules: [{\r\n                                            required: true,\r\n                                            message: '请输入查询周期'\r\n                                        },{\r\n                                            validator: (rule, value, cb) => parseFloat(value) === parseFloat(loop) ? cb('请输入一个新的查询周期') : cb(),\r\n                                            pattern: /^[1-9]\\d*$/\r\n                                        }],\r\n                                    })(\r\n                                        <Input\r\n                                            autoComplete={'off'}\r\n                                            addonAfter={'分钟'} />\r\n                                    )}\r\n                                </Form.Item>\r\n                            </Col>\r\n                        </Row>\r\n                        <Form.Item className={style.system_btn_group}>\r\n                            <Link to='/'>\r\n                                <Button type=\"default\" style={{marginRight: '16px'}}>返回</Button>\r\n                            </Link>\r\n                            <Button\r\n                                disabled={!isFieldTouched('loop') || this.hasErrors(getFieldsError(['loop']))}\r\n                                type=\"primary\" htmlType=\"submit\">保存</Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </Card>\r\n            </div>\r\n        )\r\n    }\r\n    componentDidMount(){\r\n        this.props.form.validateFields();\r\n        this.fetchTaskTypeList();\r\n    }\r\n    hasErrors = (fieldsError) => {\r\n        return Object.keys(fieldsError).some(field => fieldsError[field]);\r\n    };\r\n    fetchTaskTypeList = () => {\r\n        request({\r\n            url: '/api/get_config',\r\n            data: {},\r\n            success: (data) => {\r\n                const { table, loop } = data;\r\n                this.props.form.setFields({\r\n                    loop: {\r\n                        value: loop\r\n                    }\r\n                });\r\n                this.setState({\r\n                    taskTypeList: table || [],\r\n                    loop\r\n                })\r\n            }\r\n        })\r\n    };\r\n    handleAddTaskType = (e) => {\r\n        e.preventDefault();\r\n        let that = this;\r\n        this.props.form.validateFields(['task_type_name','time_warn', 'time_out'],(err, values) => {\r\n            if(!err){\r\n                let { task_type_name, time_warn, time_out } = values;\r\n                request({\r\n                    url: '/api/add_type',\r\n                    data: {\r\n                        task_type_name,\r\n                        time_warn,\r\n                        time_out\r\n                    },\r\n                    success: (data) => {\r\n                        notification.success({\r\n                            message: '新增任务类型成功',\r\n                            description: ''\r\n                        });\r\n                        that.props.form.setFields({\r\n                            task_type_name: '',\r\n                            time_warn: '',\r\n                            time_out: ''\r\n                        });\r\n                        that.props.form.validateFields();\r\n                        that.fetchTaskTypeList();\r\n                    },\r\n                    fail: (data) => {\r\n                        this.setState({\r\n                            addTypeErr: '不可重复新增'\r\n                        })\r\n                    }\r\n                })\r\n            }\r\n        });\r\n    };\r\n  updateING = (type) => {\r\n      this.setState({\r\n        updating: true,\r\n        updateType: type\r\n      })\r\n  };\r\n  closeModal = () => {\r\n    this.setState({\r\n      updating: false\r\n    })\r\n  };\r\n  updateType = ({task_type_id, time_warn, time_out}) => {\r\n      request({\r\n        url: '/api/update_type',\r\n        data: {\r\n          task_type_id: task_type_id,\r\n          time_warn: time_warn,\r\n          time_out: time_out\r\n        },\r\n        success: (res) => {\r\n          notification.success({\r\n            message: '修改任务类型成功'\r\n          });\r\n          this.closeModal();\r\n          this.fetchTaskTypeList();\r\n        }\r\n      })\r\n  };\r\n    deleteType = (id) => {\r\n        request({\r\n            url: '/api/delete_type',\r\n            data: {\r\n                task_type_id: id\r\n            },\r\n            success: () => {\r\n                notification.success({\r\n                    message: '删除任务类型成功'\r\n                });\r\n                this.fetchTaskTypeList();\r\n            }\r\n        })\r\n    };\r\n    handleSetLoop = (e) => {\r\n        e.preventDefault();\r\n        let that = this;\r\n        this.props.form.validateFields(['loop'],(err, values) => {\r\n            if(!err){\r\n                request({\r\n                    url: '/api/set_loop',\r\n                    data: {\r\n                        loop_time: values.loop\r\n                    },\r\n                    success: () => {\r\n                        notification.success({\r\n                            message: '设置查询周期成功',\r\n                            description: `设置成功后将每隔${values.loop}分钟自动刷新一次`\r\n                        });\r\n                        that.fetchTaskTypeList();\r\n                    }\r\n                })\r\n            }\r\n        })\r\n    };\r\n    handleChange = () => {\r\n        this.setState({\r\n            addTypeErr: false\r\n        })\r\n    }\r\n}\r\nlet SettingForm = Form.create()(Setting);\r\nexport default SettingForm;","import React from 'react';\r\nimport { Modal, Form, Input, Button, Alert } from 'antd';\r\nclass UpdateModal extends React.Component{\r\n  render(){\r\n    let { visible, close, type } = this.props;\r\n    const { getFieldDecorator, isFieldTouched, getFieldError, getFieldsError } = this.props.form;\r\n    const typeNameErr = isFieldTouched('task_type_name') && getFieldError('task_type_name');\r\n    const timeWarnErr = isFieldTouched('time_warn') && getFieldError('time_warn');\r\n    const timeOutErr = isFieldTouched('time_out') && getFieldError('time_out');\r\n    return <Modal\r\n      footer={<div>\r\n        <Button onClick={() => close()}>取消</Button>\r\n        <Button type={'primary'} onClick={() => this.ensure()} disabled={this.hasErrors(getFieldsError(['task_type_name','time_warn', 'time_out']))}>确认</Button>\r\n      </div>}\r\n      visible={visible} title={'你正在编辑 '+ type.task_type_name}>\r\n        <Form>\r\n          <Form.Item\r\n            validateStatus={typeNameErr ? 'error' : ''} help={typeNameErr || ''}\r\n            label='任务类型'>\r\n            {getFieldDecorator('task_type_name', {\r\n              rules: [{\r\n                required: true,\r\n                message: '请输入任务类型名称'\r\n              }]\r\n            })(\r\n              <Input onChange={() => this.handleChange()} disabled={true}/>\r\n            )}\r\n          </Form.Item>\r\n          <Form.Item\r\n            validateStatus={timeWarnErr ? 'error' : ''} help={timeWarnErr || ''}\r\n            label='预警时间'>\r\n            {getFieldDecorator('time_warn', {\r\n              rules: [{\r\n                required: true,\r\n                message: '请输入预警时间'\r\n              }]\r\n            })(\r\n              <Input addonAfter={'小时 '}/>\r\n            )}\r\n          </Form.Item>\r\n          <Form.Item\r\n            validateStatus={timeOutErr ? 'error' : ''} help={timeOutErr || ''}\r\n            label='超时时间'>\r\n            {getFieldDecorator('time_out', {\r\n              rules: [{\r\n                required: true,\r\n                message: '请输入超时时间'\r\n              }]\r\n            })(\r\n              <Input addonAfter={'小时'}/>\r\n            )}\r\n          </Form.Item>\r\n        </Form>\r\n      <Alert type='warning' message='注意：编辑该任务类型的预警时间及超时时间将会影响相同任务类型的预警时间和超时时间'/>\r\n    </Modal>\r\n  }\r\n  componentWillReceiveProps(nextProps){\r\n    if(nextProps.type.task_type_id !== this.props.type.task_type_id){\r\n      this.setValue(nextProps.type);\r\n    }\r\n  }\r\n  setValue = (type) => {\r\n    this.props.form.setFields({\r\n      task_type_name: {\r\n        value: type.task_type_name\r\n      },\r\n      time_warn: {\r\n        value: type.time_warn\r\n      },\r\n      time_out: {\r\n        value: type.time_out\r\n      }\r\n    })\r\n  };\r\n  hasErrors = (fieldsError) => {\r\n    return Object.keys(fieldsError).some(field => fieldsError[field]);\r\n  };\r\n  ensure = () => {\r\n    let value = this.props.form.getFieldsValue();\r\n    let type = this.props.type;\r\n    this.props.ensure({\r\n      task_type_id: type.task_type_id,\r\n      ...value\r\n    });\r\n  }\r\n}\r\nlet UpdateModalForm = Form.create()(UpdateModal);\r\nexport default UpdateModalForm;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"setting__card\",\"form_item\":\"setting__form_item\",\"search_form\":\"setting__search_form\",\"system_btn_group\":\"setting__system_btn_group\"};"],"sourceRoot":""}