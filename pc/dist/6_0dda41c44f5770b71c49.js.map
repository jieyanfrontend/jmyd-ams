{"version":3,"sources":["webpack:///./pages/login/login.js","webpack:///./helpers/request.js","webpack:///./helpers/handle-formdata.js","webpack:///./helpers/handle-json.js","webpack:///./pages/file_b/store.js","webpack:///./pages/login/login.css"],"names":["__webpack_require__","_reactRouterDom","antIcon","_react2","default","createElement","_icon2","type","style","fontSize","spin","Login","props","_classCallCheck","this","_this","_possibleConstructorReturn","__proto__","Object","getPrototypeOf","call","warning","res","_modal2","title","content","msg","handleRequest","_ref","userName","password","setState","loading","values","form","getFieldsValue","_request2","url","data","user","success","sessionStorage","setItem","loginSuccess","fail","console","log","complete","handleSubmit","e","preventDefault","validateFields","err","hasErrors","fieldsError","keys","some","field","state","Component","_props$form","getFieldDecorator","isFieldTouched","getFieldError","getFieldsError","userNameErr","passwordErr","className","_login2","container","Redirect","to","_spin2","spinning","tip","indicator","_form2","onSubmit","Item","validateStatus","help","rules","required","message","_input2","size","prefix","color","placeholder","valuePropName","initialValue","_checkbox2","login_btn_group","_button2","disabled","htmlType","login_btn","LoginForm","create","_ref$method","method","undefined","_ref$postType","postType","_ref$data","_ref$success","_ref$fail","_ref$complete","Error","xml","XMLHttpRequest","open","postData","setRequestHeader","_handleJson2","_handleFormdata2","onreadystatechange","readyState","status","JSON","parse","responseText","code","parseInt","_history2","push","alert","send","ret","FormData","map","k","Array","isArray","forEach","d","append","stringify","_mobx","Store","isDisabledBtn","wf_if","wf_id","value","inputValue","assign","word1Input","word2Input","word3Input","word4Input","word5Input","word6Input","word7Input","word8Input","word9Input","module","exports"],"mappings":"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","file":"6_0dda41c44f5770b71c49.js","sourcesContent":["import React from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport {Form, Input, Icon, Button, Checkbox, Modal, Spin} from 'antd';\r\nimport style from './login.css';\r\nimport request from '../../helpers/request';\r\nimport store from \"../file_b/store\";\r\n\r\nconst antIcon = <Icon type=\"loading\" style={{ fontSize: 24 }} spin />;\r\n\r\nclass Login extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            loginSuccess: false,\r\n            loading:false\r\n        }\r\n    }\r\n\r\n    render(){\r\n        let { loginSuccess } = this.state;\r\n        const { getFieldDecorator, isFieldTouched, getFieldError, getFieldsError } = this.props.form;\r\n        const userNameErr = isFieldTouched('userName') && getFieldError('userName');\r\n        const passwordErr = isFieldTouched('password') && getFieldError('password');\r\n\r\n        return (\r\n            <div className={style.container}>\r\n                {loginSuccess ? <Redirect to='/'/>: null}\r\n                <div className={style.form}>\r\n                    <Spin spinning={this.state.loading} tip='登陆中...' indicator={antIcon}>\r\n                        <Form onSubmit={this.handleSubmit}>\r\n                            <Form.Item validateStatus={userNameErr ? 'error' : ''} help={userNameErr || ''}>\r\n                                {getFieldDecorator('userName', {\r\n                                    rules: [{ required: true, message: '请输入用户名' }],\r\n                                })(\r\n                                    <Input size={'large'} prefix={<Icon type=\"user\" style={{ color: 'rgba(0,0,0,.25)' }} />} placeholder=\"用户名\" />\r\n                                )}\r\n                            </Form.Item>\r\n                            <Form.Item validateStatus={passwordErr ? 'error' : ''} help={passwordErr || ''}>\r\n                                {getFieldDecorator('password', {\r\n                                    rules: [{ required: true, message: '请输入密码' }],\r\n                                })(\r\n                                    <Input type='password' size={'large'} prefix={<Icon type=\"lock\" style={{ color: 'rgba(0,0,0,.25)' }} />} placeholder=\"密码\" />\r\n                                )}\r\n                            </Form.Item>\r\n                            <Form.Item>\r\n                                {getFieldDecorator('remember', {\r\n                                    valuePropName: 'checked',\r\n                                    initialValue: true,\r\n                                })(\r\n                                    <Checkbox>记住我</Checkbox>\r\n                                )}\r\n                            </Form.Item>\r\n                            <Form.Item  className={style.login_btn_group}>\r\n                                <Button\r\n                                    disabled={this.hasErrors(getFieldsError())}\r\n                                    size={'large'} type=\"primary\" htmlType=\"submit\" className={style.login_btn}>登录</Button>\r\n                            </Form.Item>\r\n                        </Form>\r\n                    </Spin>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n    componentDidMount(){\r\n        this.props.form.validateFields();\r\n    }\r\n    warning = (res) => {\r\n        Modal.warning({\r\n            title:'警告',\r\n            content: res.msg\r\n        })\r\n    };\r\n    handleRequest = ({userName, password}) => {\r\n        this.setState({\r\n            loading:true\r\n        });\r\n        let values = this.props.form.getFieldsValue();\r\n        request({\r\n              url: \"/api/login\",\r\n              data: {\r\n                  user: userName,\r\n                  password: password\r\n              },\r\n              success: res => {\r\n                  sessionStorage.setItem('username',values['username']);\r\n                  this.setState({\r\n                      loginSuccess: true\r\n                  })\r\n              },\r\n              fail: res => {\r\n                  console.log('fail');\r\n                  this.warning(res);\r\n              },\r\n            complete: () => {\r\n                this.setState({\r\n                    loading:false\r\n                });\r\n            }\r\n          })\r\n    };\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.props.form.validateFields((err, values) => {\r\n            if(err){\r\n\r\n            }else{\r\n                this.handleRequest(values);\r\n            }\r\n        });\r\n    };\r\n    hasErrors = (fieldsError) => {\r\n        return Object.keys(fieldsError).some(field => fieldsError[field]);\r\n    }\r\n}\r\nlet LoginForm = Form.create()(Login);\r\nexport default LoginForm;\r\n","import handleJson from './handle-json';\r\nimport handleFormData from './handle-formdata';\r\nimport history from '../history'\r\nimport {Modal} from \"antd\";\r\n\r\nfunction request({ url, method = 'POST', postType = 'json' ,data = {}, success = () => {}, fail = () => {}, complete = () => {}}) {\r\n    if(!url){\r\n        throw new Error('url参数不可缺省');\r\n    }\r\n    let xml = new XMLHttpRequest();\r\n    xml.open(method, url);\r\n    let postData ;\r\n    switch (postType){\r\n        case 'json':\r\n            xml.setRequestHeader('Content-Type', 'application/json');\r\n            postData = handleJson(data);\r\n            break;\r\n        case 'formdata':\r\n            // xml.setRequestHeader('Content-Type', \"application/vnd.ms-excel\");\r\n            postData = handleFormData(data);\r\n            break;\r\n        default:\r\n            xml.setRequestHeader('Content-Type', 'application/json');\r\n            postData = handleJson(data);\r\n    }\r\n    xml.onreadystatechange = () => {\r\n        if(xml.readyState === 4){\r\n            if(xml.status === 200){\r\n                let data = JSON.parse(xml.responseText);\r\n                let code = data.code;\r\n                try{\r\n                    if(code === undefined) throw new Error('code is not defined');\r\n                }catch(e){\r\n                    data = JSON.parse(data);\r\n                }\r\n                if(parseInt(data.code) === 200){\r\n                    success(data);\r\n                }else{\r\n                    if(data.code === 403){\r\n                        history.push('/login');\r\n                        Modal.warning({\r\n                            title:'警告',\r\n                            content: data.msg\r\n                        })\r\n                    }else{\r\n                        Modal.warning({\r\n                            title:'警告',\r\n                            content: data.msg\r\n                        });\r\n                        fail(data)\r\n                    }\r\n                }\r\n            }else{\r\n                alert('请求遇到了问题，请稍后再尝试');\r\n                fail(data);\r\n            }\r\n            complete();\r\n        }\r\n    };\r\n    xml.send(postData);\r\n\r\n}\r\n\r\n\r\nexport default request;\r\n","let handleFormData = (data) => {\r\n    let ret = new FormData();\r\n    Object.keys(data).map(k => {\r\n        if(Array.isArray(data[k])){\r\n            data[k].forEach(d => {\r\n                ret.append(k,d);\r\n            })\r\n        }else{\r\n            ret.append(k,data[k]);\r\n        }\r\n    });\r\n    return ret;\r\n};\r\nexport default handleFormData;","let handleJson = (data) => {\r\n    return JSON.stringify(data);\r\n};\r\nexport default handleJson;","import { observable, action, autorun} from 'mobx';\r\nclass Store {\r\n  @observable type = '批开停开机';\r\n  @action\r\n  changeType(type){\r\n    this.type = type;\r\n  }\r\n  @observable isDisabledBtn = false;\r\n  @action\r\n  changeBtn(type){\r\n      this.isDisabledBtn = type\r\n  }\r\n  @observable loading = false;\r\n  @action\r\n  setLoading(res) {\r\n      this.loading = res;\r\n  }\r\n @observable wf_id = {\r\n }\r\n @action\r\n  setWf_id(wf_if){\r\n    this.wf_id = wf_if;\r\n }\r\n @observable inputValue = {\r\n    word1Input: '',\r\n    word2Input: '',\r\n    word3Input: '',\r\n    word4Input: '',\r\n    word5Input: '',\r\n    word6Input: '',\r\n    word7Input: '',\r\n    word8Input: '',\r\n    word9Input: '',\r\n };\r\n  @action\r\n    setInputValue(value){\r\n        this.inputValue = Object.assign({},this.inputValue,value);\r\n    }\r\n}\r\n\r\nexport default new Store();","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"login_container\",\"form\":\"login_form\",\"login_btn_group\":\"login_login_btn_group\",\"login_btn\":\"login_login_btn\"};"],"sourceRoot":""}